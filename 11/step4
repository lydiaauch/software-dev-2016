#! /usr/bin/env python

"""
A test harness for the Dealers step4 method
"""

import sys
import json
from evolution.convert import Convert
from evolution.dealer  import Dealer

decoder = json.JSONDecoder()

def main():
    buffer = ""
    dealer = None
    step4 = None
    waiting_for_data = True
    while waiting_for_data:
        line = sys.stdin.readline().strip(" \n\r\t")
        (decoded_json, buffer) = json_parser(line, buffer)
        if decoded_json:
            for json_object in decoded_json:
                if dealer is None:
                    dealer = Convert.json_to_dealer(json_object)
                else:
                    step4 = Convert.json_to_step4(json_object)
                    waiting_for_data = False
    if buffer:
        print("Warning the JSON stream contained incorrect JSON")
    dealer.step4(step4)
    print(json.dumps(Convert.dealer_to_json(dealer)))
    sys.exit(0)

def json_parser(line, buffer):
    """
    Searches for full JSON messages and adds incomplete messages to a buffer
    :param line: line of JSON from stdin
    :param buffer: the previous lines of incomplete JSON messages
    :return: a tuple of (list-of-correct_JSON_messages, current buffer)
    """
    buffer += line
    decoded_json = []
    try:
        while True:
            (json_obj, end_index) = decoder.raw_decode(buffer)
            decoded_json.append(json_obj)
            buffer = buffer[end_index:]
    except:
        return (decoded_json, buffer)


if __name__ == "__main__":
    main()
